@inject ISnackbar Snackbar
@inject ITridionCoreService client

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Republish following @TransactionText?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudList>
            @foreach (var transaction in PublishTransactions)
            {
                <MudListItem @key="transaction.TransactionId">
                    @transaction.Title
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="DeleteServer">Republish @PublishTransactions.Count() @TransactionText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IEnumerable<PublishTransaction> PublishTransactions { get; set; }
    public string TransactionText => PublishTransactions.Count() > 1 ? "transactions" : "transaction";

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task DeleteServer()
    {
        var result = await client.RePublish(PublishTransactions.Select(i => i.TransactionId));
        if (result)
        {
            Snackbar.Add("Sent to publish queue", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Failed to sent to publish queue", Severity.Error);
            MudDialog.Close(DialogResult.Ok(false));
        }
    }
}
